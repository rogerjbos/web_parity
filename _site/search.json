[
  {
    "objectID": "Slides.html#introduction",
    "href": "Slides.html#introduction",
    "title": "Parachain Health",
    "section": "Introduction",
    "text": "Introduction\nThis presentation supplements two Parachain Health dashboards for Acala, Astar, Clover, Moonbeam, and Parallel. Some of the metrics displayed are as follows:\nShorter-term metrics (most recent 100,000 blocks):\n\nBlock production time & number of events per block\n\nLonger-term metrics (7 days and 30 days):\n\nNumber of active accounts, number and value of transfers, number of extrinsics, & value of XCM transfers"
  },
  {
    "objectID": "Slides.html#my-background",
    "href": "Slides.html#my-background",
    "title": "Parachain Health",
    "section": "My Background",
    "text": "My Background\nSince February 2022 I have been working as a Data Analytics Engineer for Acala Network.\n\nThe dashboards I built for Acala & Karura are still available at this url and the code is available on Acala’s Github.\nThe data was extracted from the Subscan API and various Subquery projects, using an R package I wrote that has functions for Subscan, SubQuery, and Polkaholic.\nMany of the dashboards I created for Acala do use some Python code, most notably aUSD Issuance, Karura Liquidations, and Tokens."
  },
  {
    "objectID": "Slides.html#data-source---polkaholic",
    "href": "Slides.html#data-source---polkaholic",
    "title": "Parachain Health",
    "section": "Data Source - Polkaholic",
    "text": "Data Source - Polkaholic\nI use the Polkaholic API for this project since I wanted to try out a new data source, they support all the parachains, and they have an interesting set of data available.\nInitially, I intended to use Subsquid since I was less familiar with that project and wanted to learn more about it.\nLike SubQuery, Subsquid usually requires building a TypeScript project to custom index the data, but the Subsquid team created many Archive projects as part of the firesquid offering that contain indexed raw blockchain data. Unfortunately, I discovered that they don’t have archives for all parachains, including Astar, Clover and Parallel, so I was not able to use Subsquid."
  },
  {
    "objectID": "Slides.html#deliverables",
    "href": "Slides.html#deliverables",
    "title": "Parachain Health",
    "section": "Deliverables",
    "text": "Deliverables\nThere are three deliverables to support this presentation:\n\nA Quarto dashboard written in Python. This is a static HTML file that can be viewed offline and emailed to anyone.\nA Rmarkdown dashboard written in R. This is also a static HTML file that can be viewed offline and emailed to anyone.\nA Shiny that replicates the content of the Rmarkdown dashboard, but also adds interactivity so you can add/remove parachains to be included in the dashboard. The only downside is that it has to be hosted on a server so there is some extra overhead associated with that."
  },
  {
    "objectID": "Slides.html#date-and-block-ranges",
    "href": "Slides.html#date-and-block-ranges",
    "title": "Parachain Health",
    "section": "Date and block ranges",
    "text": "Date and block ranges\nSince we defined our data by the number of events (100,000), the date range and number of blocks will vary by parachain. For Astar and Moonbeam this ends up being only a few hours, but for Acala and Clover it represents 4 to 6 days.\n\n\n\n\n\n\n\n\n \n  \n    chainName \n    minDate \n    maxDate \n    minBlock \n    maxBlock \n    numBlocks \n  \n \n\n  \n    Acala \n    2022-09-09 19:41:00 \n    2022-09-13 19:59:07 \n    1,826,051 \n    1,853,903 \n    27,852 \n  \n  \n    Astar \n    2022-09-13 16:20:06 \n    2022-09-13 19:59:48 \n    1,853,040 \n    1,854,099 \n    1,059 \n  \n  \n    Clover \n    2022-09-07 18:17:54 \n    2022-09-13 19:59:48 \n    1,729,994 \n    1,771,314 \n    41,320 \n  \n  \n    Moonbeam \n    2022-09-13 15:10:24 \n    2022-09-13 19:59:54 \n    1,860,823 \n    1,862,231 \n    1,408 \n  \n  \n    Parallel \n    2022-09-12 10:21:30 \n    2022-09-13 19:59:54 \n    1,792,801 \n    1,802,581 \n    9,780"
  },
  {
    "objectID": "Slides.html#network-utilization",
    "href": "Slides.html#network-utilization",
    "title": "Parachain Health",
    "section": "Network utilization",
    "text": "Network utilization\nAster and Moonbeam have the highest network utilization, based on the average number of events per block. Acala has paused most operations since August 14th, so that explains it’s low number. Clover has the smallest number of events per block despite having the largest number of wallets.\n\n\n\n\n\n\n\n\n\n \n  \n    Parachain \n    Events \n  \n \n\n  \n    Acala \n    3.6 \n  \n  \n    Astar \n    94.3 \n  \n  \n    Clover \n    2.4 \n  \n  \n    Moonbeam \n    71.0 \n  \n  \n    Parallel \n    10.2"
  },
  {
    "objectID": "Slides.html#boxplot-of-number-of-events-per-block",
    "href": "Slides.html#boxplot-of-number-of-events-per-block",
    "title": "Parachain Health",
    "section": "Boxplot of number of events per block",
    "text": "Boxplot of number of events per block\nThis box plot shows the outliers in additional to the bulk of the observations and Moonbeam leads the way with a lot of blocks with high volume."
  },
  {
    "objectID": "Slides.html#block-time-statistics",
    "href": "Slides.html#block-time-statistics",
    "title": "Parachain Health",
    "section": "Block Time Statistics",
    "text": "Block Time Statistics\nThe max block time values make it look like Astar and Moonbean are much more consistent than the other parachains, but the average block time is virtually identical for all the parachains, showing that there are very few blocks that take a long time to produce.\n\n\n\n\n\n\n\n\n \n  \n    Parachain \n    minBlockTime \n    maxBlockTime \n    avgBlockTime \n  \n \n\n  \n    Acala \n    7 \n    84 \n    12.5 \n  \n  \n    Astar \n    11 \n    67 \n    12.4 \n  \n  \n    Clover \n    7 \n    103 \n    12.7 \n  \n  \n    Moonbeam \n    10 \n    71 \n    12.3 \n  \n  \n    Parallel \n    8 \n    72 \n    12.4"
  },
  {
    "objectID": "Slides.html#slow-block-production",
    "href": "Slides.html#slow-block-production",
    "title": "Parachain Health",
    "section": "Slow Block Production",
    "text": "Slow Block Production\nThe percentage of blocks that take longer than 13 seconds to produce doesn’t vary much by parachain, although Clover is the slowest despite having a small number of events per block.\n\n\n\n\n\n\n\n\n \n  \n    Parachain \n    Total \n    slow \n    Percent \n  \n \n\n  \n    Acala \n    27,839 \n    4,698 \n    16.9 \n  \n  \n    Astar \n    1,060 \n    164 \n    15.5 \n  \n  \n    Clover \n    41,307 \n    7,980 \n    19.3 \n  \n  \n    Moonbeam \n    1,408 \n    242 \n    17.2 \n  \n  \n    Parallel \n    9,774 \n    1,570 \n    16.1"
  },
  {
    "objectID": "Slides.html#boxplot-of-block-duration-times",
    "href": "Slides.html#boxplot-of-block-duration-times",
    "title": "Parachain Health",
    "section": "Boxplot of block duration times",
    "text": "Boxplot of block duration times\nThis plot looks really bad, but it is actually very accurate. The thin line right at 12 shows that there are very few blocks that are produced faster or slower than 12 seconds. Each diamond shows the outlines, so we can clearly see how few observations there are."
  },
  {
    "objectID": "Slides.html#selected-events-by-module",
    "href": "Slides.html#selected-events-by-module",
    "title": "Parachain Health",
    "section": "Selected Events by Module",
    "text": "Selected Events by Module\nAstar looks goon on this chart because around 24% of it’s events are EVM related, as opposed to more generic events such as system and balance. Since Acala is mostly paused (but still producing blocks) 70% of events are system and Clover is over 90% system.\n\n\n\n\n\n\n\n\n \n  \n      \n    Parachain \n    Module \n    Events \n    Total \n    Percent \n  \n \n\n  \n    0 \n    Acala \n    balances \n    17,954 \n    100,000 \n    17.954 \n  \n  \n    12 \n    Acala \n    system \n    63,922 \n    100,000 \n    63.922 \n  \n  \n    22 \n    Astar \n    balances \n    41,220 \n    100,000 \n    41.220 \n  \n  \n    26 \n    Astar \n    evm \n    28,029 \n    100,000 \n    28.029 \n  \n  \n    30 \n    Astar \n    system \n    13,038 \n    100,000 \n    13.038 \n  \n  \n    49 \n    Clover \n    system \n    91,105 \n    100,000 \n    91.105 \n  \n  \n    54 \n    Moonbeam \n    balances \n    35,719 \n    100,000 \n    35.719 \n  \n  \n    59 \n    Moonbeam \n    evm \n    23,796 \n    100,000 \n    23.796 \n  \n  \n    63 \n    Moonbeam \n    system \n    14,600 \n    100,000 \n    14.600 \n  \n  \n    64 \n    Moonbeam \n    treasury \n    15,803 \n    100,000 \n    15.803 \n  \n  \n    71 \n    Parallel \n    balances \n    33,391 \n    100,000 \n    33.391 \n  \n  \n    75 \n    Parallel \n    loans \n    14,683 \n    100,000 \n    14.683 \n  \n  \n    81 \n    Parallel \n    system \n    30,234 \n    100,000 \n    30.234"
  },
  {
    "objectID": "Slides.html#selected-stats-for-entire-history",
    "href": "Slides.html#selected-stats-for-entire-history",
    "title": "Parachain Health",
    "section": "Selected stats for entire history",
    "text": "Selected stats for entire history\nThis is a nice summary table provided from the Polkaholic data. For each column, the median value is calculated and observations below median are colored in red and observations above median are color in green.\n\n\n\n\n\n \n  \n    Parachain \n    Icon \n    Active Accts \n    Transfers \n    Transfers USD \n    Extrinsics \n    Incoming XCM USD \n    Outgoing XCM USD \n  \n \n\n  \n   \n Acala \n\n     \n\n    1,517.0 \n    2,913,278.0 \n    36,809,401,921.5 \n     5,332,050.0 \n    1,825,921,595.7 \n    2,147,065,157.9 \n  \n  \n   \n Astar \n\n     \n\n    2,940.0 \n    4,923,288.0 \n     4,846,169,376.2 \n    46,075,346.0 \n       10,419,422.1 \n          987,971.4 \n  \n  \n   \n Clover \n\n     \n\n       17.0 \n        8,380.0 \n        10,736,804.5 \n     3,600,498.0 \n                0.0 \n                0.0 \n  \n  \n   \n Moonbeam \n\n     \n\n    4,960.0 \n    4,316,298.0 \n     9,937,577,103.8 \n    16,051,827.0 \n    5,016,913,789.6 \n    3,465,364,536.3 \n  \n  \n   \n Parallel \n\n     \n\n      390.0 \n    1,576,899.0 \n       819,189,394.0 \n     4,359,137.0 \n       57,349,013.1 \n       34,271,910.5"
  },
  {
    "objectID": "Slides.html#selected-stats-for-last-7-days",
    "href": "Slides.html#selected-stats-for-last-7-days",
    "title": "Parachain Health",
    "section": "Selected stats for last 7 days",
    "text": "Selected stats for last 7 days\nThis chart shows the same stats for the last 7 days and it is clear that Moonbeam is leading in every measure, followed by Astar. Clover is not showing near as much activity.\n\n\n\n\n\n \n  \n    Parachain \n    Icon \n    Active Accts \n    Transfers \n    Transfers USD \n    Extrinsics \n    Incoming XCM USD \n    Outgoing XCM USD \n  \n \n\n  \n   \n Acala \n\n     \n\n      325.0 \n      5,029.0 \n    57,361,160.89 \n     99,429.0 \n     47.0 \n      2.0 \n  \n  \n   \n Astar \n\n     \n\n    2,043.0 \n     70,334.0 \n    25,990,494.61 \n    395,663.0 \n     50.0 \n     84.0 \n  \n  \n   \n Clover \n\n     \n\n       24.0 \n        206.0 \n        51,475.11 \n     91,893.0 \n      0.0 \n      3.0 \n  \n  \n   \n Moonbeam \n\n     \n\n    4,342.0 \n    101,321.0 \n    76,295,194.77 \n    437,569.0 \n    245.0 \n    216.0 \n  \n  \n   \n Parallel \n\n     \n\n      606.0 \n     65,502.0 \n     9,831,876.00 \n    140,170.0 \n    436.0 \n    224.0"
  },
  {
    "objectID": "Slides.html#selected-stats-for-last-30-days",
    "href": "Slides.html#selected-stats-for-last-30-days",
    "title": "Parachain Health",
    "section": "Selected stats for last 30 days",
    "text": "Selected stats for last 30 days\nThe 30 day picture looks the same, with Moonbeam still leading in every measure, followed by Astar. Clover is not showing near as much activity.\n\n\n\n\n\n \n  \n    Parachain \n    Icon \n    Active Accts \n    Transfers \n    Transfers USD \n    Extrinsics \n    Incoming XCM USD \n    Outgoing XCM USD \n  \n \n\n  \n   \n Acala \n\n     \n\n      461.0 \n     25,559.0 \n    10,316,054,905.9 \n      585,501.0 \n      906.0 \n       24.0 \n  \n  \n   \n Astar \n\n     \n\n    1,744.0 \n    348,957.0 \n        74,979,423.3 \n    1,886,932.0 \n      230.0 \n      321.0 \n  \n  \n   \n Clover \n\n     \n\n       18.0 \n        925.0 \n           698,979.8 \n      413,360.0 \n        0.0 \n        3.0 \n  \n  \n   \n Moonbeam \n\n     \n\n    4,137.0 \n    390,714.0 \n       235,955,438.9 \n    1,705,632.0 \n    2,177.0 \n    2,121.0 \n  \n  \n   \n Parallel \n\n     \n\n      503.0 \n    273,904.0 \n       233,448,655.5 \n      588,371.0 \n    3,013.0 \n    1,471.0"
  },
  {
    "objectID": "Slides.html#number-of-addresses",
    "href": "Slides.html#number-of-addresses",
    "title": "Parachain Health",
    "section": "Number of Addresses",
    "text": "Number of Addresses\nAstar has been leading in the number of addresses for a few months now, and saw a nice bump up in the middle of August (likely error mint related). Moonbean is showing steady growth that should be sustainable."
  },
  {
    "objectID": "Slides.html#number-of-active-accounts",
    "href": "Slides.html#number-of-active-accounts",
    "title": "Parachain Health",
    "section": "Number of Active Accounts",
    "text": "Number of Active Accounts\nMoonbeam is leading in active accounts. Astar is also showing some good activity."
  },
  {
    "objectID": "Slides.html#number-of-transfers",
    "href": "Slides.html#number-of-transfers",
    "title": "Parachain Health",
    "section": "Number of Transfers",
    "text": "Number of Transfers\nMoonbeam and Astar show the most volatility in the number of transfers per day, but the general trend is flat for most of the parachains. Acala transfers fell sharply once they paused most operations."
  },
  {
    "objectID": "Slides.html#value-of-transfers-in-usd",
    "href": "Slides.html#value-of-transfers-in-usd",
    "title": "Parachain Health",
    "section": "Value of Transfers in USD",
    "text": "Value of Transfers in USD\nIn this chart the spikes for Acala are so large they obscure the activity in the other parachains. For that reason we repeat the chart on the next slide excluding Acala."
  },
  {
    "objectID": "Slides.html#value-of-transfers-in-usd-1",
    "href": "Slides.html#value-of-transfers-in-usd-1",
    "title": "Parachain Health",
    "section": "Value of Transfers in USD",
    "text": "Value of Transfers in USD\nExcluding Acala, Parallel had a big spike on August 18th. Astar and Moonbeam are showing good, consistent transfer activity."
  },
  {
    "objectID": "Slides.html#number-of-events",
    "href": "Slides.html#number-of-events",
    "title": "Parachain Health",
    "section": "Number of Events",
    "text": "Number of Events\nAstar was leading the way in June & July, but then volume fell off. Moonbeam shows good, consistent volume of around 500 events per day."
  },
  {
    "objectID": "Slides.html#number-of-extrinsics",
    "href": "Slides.html#number-of-extrinsics",
    "title": "Parachain Health",
    "section": "Number of Extrinsics",
    "text": "Number of Extrinsics\nThe number of extrinsics shows pretty much the same picture as the number of events."
  },
  {
    "objectID": "Slides.html#number-of-evm-transactions",
    "href": "Slides.html#number-of-evm-transactions",
    "title": "Parachain Health",
    "section": "Number of EVM Transactions",
    "text": "Number of EVM Transactions\nAs in many of the previous slides, Moonbeam and Astar lead the way in the number of EVM transactions."
  },
  {
    "objectID": "Slides.html#fees-in-native-tokens",
    "href": "Slides.html#fees-in-native-tokens",
    "title": "Parachain Health",
    "section": "Fees in Native Tokens",
    "text": "Fees in Native Tokens\nClover had a spike in fees on June 23rd. Due to this spike we will repeat this chart on the next slide excluding Clover."
  },
  {
    "objectID": "Slides.html#fees-in-native-tokens-1",
    "href": "Slides.html#fees-in-native-tokens-1",
    "title": "Parachain Health",
    "section": "Fees in Native Tokens",
    "text": "Fees in Native Tokens\n(excluding Clover)\nMoonbean has the fees, on average, but Parallel has been seeing steady fees since August."
  },
  {
    "objectID": "Slides.html#value-of-incoming-xcm-transfer",
    "href": "Slides.html#value-of-incoming-xcm-transfer",
    "title": "Parachain Health",
    "section": "Value of Incoming XCM Transfer",
    "text": "Value of Incoming XCM Transfer\nXCM Transfers were driven by the Acala error mint, with Acala seeing outflows and Moonbeam see inflows of exactly equal magnitude. Those peaks are not likely to be repeated."
  },
  {
    "objectID": "Slides.html#value-of-outgoing-xcm-transfer",
    "href": "Slides.html#value-of-outgoing-xcm-transfer",
    "title": "Parachain Health",
    "section": "Value of Outgoing XCM Transfer",
    "text": "Value of Outgoing XCM Transfer\nXCM Transfers were driven by the Acala error mint, with Acala seeing outflows and Moonbeam see inflows of exactly equal magnitude. Those peaks are not likely to be repeated."
  },
  {
    "objectID": "Slides.html#conclusion",
    "href": "Slides.html#conclusion",
    "title": "Parachain Health",
    "section": "Conclusion",
    "text": "Conclusion\nPrior to this project, I knew Moonbeam was a top network and these dashboards have proven that to be the case. I didn’t know much about Astar, but the network performance looks pretty impressive. Clover is the network I would be most worried about based on performance and activity. Parallel didn’t really stand out in many of the charts, but it is showing some pretty good fee revenue in the past month. Acala is suffering a problem which was entirely self inflicted and is facing a long recovery to rebuild trust."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Parachain Health",
    "section": "",
    "text": "The R dashboard, Python dashboard, and slide presentation can be accessed from the top navigation bar.\nThere is also a Shiny app which can be accessed [here](https://sagepoint.shinyapps.io/parachain_health/).\nThe source code for this website, which has the code for all the dashboards, is available on [Github](https://github.com/rogerjbos/web_parity)."
  },
  {
    "objectID": "Python_Dashboard.html",
    "href": "Python_Dashboard.html",
    "title": "Parachain Health (Python version)",
    "section": "",
    "text": "Summary of date and block ranges\nSince we defined our data by the number of events, the date range and number of blocks will vary by parachain, as shown in the table below.\n\nShow hidden code\nsummary = pd.DataFrame([{'chainName': k,\n                        'minDate': v.Date.min(),\n                        'maxDate': v.Date.max(),\n                        'minBlock': v.blockNumber.min(),\n                        'maxBlock': v.blockNumber.max()}\n                       for k,v in comb.groupby(['chainName'])])\nsummary['numBlocks'] = summary['maxBlock'] - summary['minBlock']\n\nMarkdown(tabulate(\n  pd.DataFrame(summary),\n  headers=[\"Parachain\",\"Earliest Date\", \"Latest Date\", \"Earliest Block\", \"Lastest Block\", \"Number of Blocks\"]\n))\n\n\n\n\n\nParachain\nEarliest Date\nLatest Date\nEarliest Block\nLastest Block\nNumber of Blocks\n\n\n\n\n0\nAcala\n2022-09-09 23:41:00\n2022-09-13 23:59:07\n1826051\n1853903\n27852\n\n\n1\nAstar\n2022-09-13 20:20:06\n2022-09-13 23:59:48\n1853040\n1854099\n1059\n\n\n2\nClover\n2022-09-07 22:17:54\n2022-09-13 23:59:48\n1729994\n1771314\n41320\n\n\n3\nMoonbeam\n2022-09-13 19:10:24\n2022-09-13 23:59:54\n1860823\n1862231\n1408\n\n\n4\nParallel\n2022-09-12 14:21:30\n2022-09-13 23:59:54\n1792801\n1802581\n9780\n\n\n\n\n\nNumber of Events by Module\nWhile network utilization can be measured in many different ways, we will use the average number of events per block as a rough estimate for how much a parachain is being used, relative to other parachains. (This table has been moved to the end of the document due to its large size.)\n\n\nNetwork utilization\nWhile network utilization can be measured in many different ways, we will use the average number of events per block as a rough estimate for how much a parachain is being used, relative to other parachains.\n\nShow hidden code\nevents_per_block = comb.groupby(['chainName','blockNumber'])['eventID'].count()\navg_events_per_block = events_per_block.groupby(['chainName']).mean().round(1)\n\nMarkdown(tabulate(\n  pd.DataFrame(avg_events_per_block),\n  headers=[\"Parachain\",\"Average number of events per block\"]\n))\n\n\n\n\nParachain\nAverage number of events per block\n\n\n\n\nAcala\n3.6\n\n\nAstar\n94.3\n\n\nClover\n2.4\n\n\nMoonbeam\n71\n\n\nParallel\n10.2\n\n\n\n\n\nDistribution of number of events per block\n\n\nShow hidden code\nepb = pd.DataFrame(events_per_block).reset_index()\nepb = epb.rename(columns={\"chainName\": \"Parachain\", \"blockNumber\": \"Block\", \"eventID\": \"Events\"})\n# sns.violinplot(x=epb[\"Events\"])\nsns.boxplot(data=epb, x=\"Events\", y=\"Parachain\")\nplt.show()\n\n\n\n\n\n\n\nBlock Time Statistics\nMax block time calculates how long it took, in seconds, to produce the slowest block and differs widely for the various parachains.\n\nShow hidden code\nblock_duration = comb.groupby(['chainName','blockNumber'])['Date'].min().diff()\n# Remove NaT observations\nblock_duration = block_duration.dropna()\n\nmb = pd.DataFrame(block_duration.dt.seconds).reset_index()\nmb = mb.rename(columns={\"chainName\": \"Parachain\", \"blockNumber\": \"Block\", \"Date\": \"Seconds\"})\n# remove four errant observations with block time over 80,000 seconds??\nmb = mb[mb['Seconds'] < 999]\n\nmax_block_time = pd.DataFrame([{'Parachain': k,\n                        'minBlockTime': v.Seconds.min(),\n                        'maxBlockTime': v.Seconds.max(),\n                        'avgBlockTime': v.Seconds.mean().round(1)}\n                       for k,v in mb.groupby(['Parachain'])])\n\nMarkdown(tabulate(\n  pd.DataFrame(max_block_time),\n  headers=[\"Parachain\",\"Min Block Time\",\"Max Block Time\",\"Average Block Time\"]\n))\n\n\n\n\n\nParachain\nMin Block Time\nMax Block Time\nAverage Block Time\n\n\n\n\n0\nAcala\n7\n84\n12.5\n\n\n1\nAstar\n11\n67\n12.4\n\n\n2\nClover\n7\n103\n12.7\n\n\n3\nMoonbeam\n10\n71\n12.3\n\n\n4\nParallel\n8\n72\n12.4\n\n\n\n\n\nSlow Block Production\nWith the average block taking 12 seconds to produce, and very few observations of faster block production, we look at slow block production as a performance measure. This table shows the number of blocks that took over 13 seconds to produce.\n\nShow hidden code\n# Find slow block production\nsb = pd.DataFrame(block_duration.dt.seconds).reset_index()\nsb = sb.rename(columns={\"chainName\": \"Parachain\", \"blockNumber\": \"Block\", \"Date\": \"Seconds\"})\n\nslow_blocks = pd.DataFrame([{'Parachain': k,\n                        'N': v.Seconds.count(),\n                        'slow': v.Seconds[v.Seconds > 12].count()}\n                       for k,v in sb.groupby(['Parachain'])])\nslow_blocks['pct_slow'] = ((slow_blocks['slow'] / slow_blocks['N']) * 100).round(1)\n\nMarkdown(tabulate(\n  pd.DataFrame(slow_blocks),\n  headers=[\"Parachain\",\"Total Blocks\",\"Slow Blocks (over 13 seconds)\",\"Percent Slow (%)\"]\n))\n\n\n\n\n\nParachain\nTotal Blocks\nSlow Blocks (over 13 seconds)\nPercent Slow (%)\n\n\n\n\n0\nAcala\n27839\n4698\n16.9\n\n\n1\nAstar\n1060\n164\n15.5\n\n\n2\nClover\n41307\n7980\n19.3\n\n\n3\nMoonbeam\n1408\n242\n17.2\n\n\n4\nParallel\n9774\n1570\n16.1\n\n\n\n\n\nDistribution of block duration times\nThe following chart shows the distribution of block duration times for each parachain. To enhance the visual comparison we exclude block times greater than 30 seconds.\n\n\nShow hidden code\nbd = pd.DataFrame(block_duration.dt.seconds).reset_index()\nbd = bd.rename(columns={\"chainName\": \"Parachain\", \"blockNumber\": \"Block\", \"Date\": \"Seconds\"})\nbd = bd[bd['Seconds'] > 0]\nbd = bd[bd['Seconds'] < 30]\n# sns.violinplot(x=bdff[\"Seconds\"])\nsns.boxplot(data=bd, x=\"Seconds\", y=\"Parachain\")\nplt.show()\n\n\n\n\n\n\n\nNumber of Events by Module\n\nShow hidden code\nsb = pd.DataFrame(block_duration.dt.seconds).reset_index()\nsb = sb.rename(columns={\"chainName\": \"Parachain\", \"blockNumber\": \"Block\", \"Date\": \"Seconds\"})\n\nslow_blocks = pd.DataFrame([{'Parachain': k,\n                        'N': v.Seconds.count(),\n                        'slow': v.Seconds[v.Seconds > 12].count()}\n                       for k,v in sb.groupby(['Parachain'])])\n\ncount_by_chain = comb.groupby(['chainName'])['eventID'].count()\ncount_by_chain = pd.DataFrame(count_by_chain).reset_index().rename(columns={\"chainName\": \"Parachain\", \"eventID\": \"N\"})\n\ncount_by_section = comb.groupby(['chainName','section'])['eventID'].count()\ncount_by_section = pd.DataFrame(count_by_section).reset_index().rename(columns={\"chainName\": \"Parachain\", \"section\": \"Module\", \"eventID\": \"Events\"})\ncount_by_section = count_by_section.merge(count_by_chain, on = \"Parachain\")\ncount_by_section['Percent'] = (count_by_section['Events'] / count_by_section['N']) * 100\n\nMarkdown(tabulate(\n  pd.DataFrame(count_by_section),\n  headers=[\"Parachain\",\"Module\",\"Events\",\"Total\",\"Percent\"]\n))\n\n\n\n\n\nParachain\nModule\nEvents\nTotal\nPercent\n\n\n\n\n0\nAcala\nbalances\n17954\n100000\n17.954\n\n\n1\nAcala\ncurrencies\n119\n100000\n0.119\n\n\n2\nAcala\ndemocracy\n43\n100000\n0.043\n\n\n3\nAcala\ndmpQueue\n7\n100000\n0.007\n\n\n4\nAcala\nhoma\n30\n100000\n0.03\n\n\n5\nAcala\nmultisig\n6\n100000\n0.006\n\n\n6\nAcala\nnft\n2\n100000\n0.002\n\n\n7\nAcala\nparachainSystem\n14\n100000\n0.014\n\n\n8\nAcala\nproxy\n3727\n100000\n3.727\n\n\n9\nAcala\nscheduler\n2\n100000\n0.002\n\n\n10\nAcala\nsession\n49\n100000\n0.049\n\n\n11\nAcala\nstableAsset\n19\n100000\n0.019\n\n\n12\nAcala\nsystem\n63922\n100000\n63.922\n\n\n13\nAcala\ntokens\n271\n100000\n0.271\n\n\n14\nAcala\ntransactionPause\n8\n100000\n0.008\n\n\n15\nAcala\ntransactionPayment\n6547\n100000\n6.547\n\n\n16\nAcala\ntreasury\n6594\n100000\n6.594\n\n\n17\nAcala\nutility\n234\n100000\n0.234\n\n\n18\nAcala\nvesting\n406\n100000\n0.406\n\n\n19\nAcala\nxTokens\n2\n100000\n0.002\n\n\n20\nAcala\nxcmpQueue\n44\n100000\n0.044\n\n\n21\nAstar\nassets\n470\n100000\n0.47\n\n\n22\nAstar\nbalances\n41220\n100000\n41.22\n\n\n23\nAstar\ndappsStaking\n4455\n100000\n4.455\n\n\n24\nAstar\ndmpQueue\n4\n100000\n0.004\n\n\n25\nAstar\nethereum\n9389\n100000\n9.389\n\n\n26\nAstar\nevm\n28029\n100000\n28.029\n\n\n27\nAstar\nparachainSystem\n8\n100000\n0.008\n\n\n28\nAstar\npolkadotXcm\n1\n100000\n0.001\n\n\n29\nAstar\nsession\n5\n100000\n0.005\n\n\n30\nAstar\nsystem\n13038\n100000\n13.038\n\n\n31\nAstar\ntransactionPayment\n882\n100000\n0.882\n\n\n32\nAstar\nutility\n2473\n100000\n2.473\n\n\n33\nAstar\nvesting\n22\n100000\n0.022\n\n\n34\nAstar\nxcmpQueue\n4\n100000\n0.004\n\n\n35\nClover\nassetConfig\n2\n100000\n0.002\n\n\n36\nClover\nassets\n3\n100000\n0.003\n\n\n37\nClover\nbalances\n4563\n100000\n4.563\n\n\n38\nClover\ncouncil\n20\n100000\n0.02\n\n\n39\nClover\ndemocracy\n12\n100000\n0.012\n\n\n40\nClover\ndmpQueue\n3\n100000\n0.003\n\n\n41\nClover\nelectionsPhragmen\n1\n100000\n0.001\n\n\n42\nClover\nethereum\n2096\n100000\n2.096\n\n\n43\nClover\nevm\n2106\n100000\n2.106\n\n\n44\nClover\nparachainSystem\n7\n100000\n0.007\n\n\n45\nClover\npolkadotXcm\n6\n100000\n0.006\n\n\n46\nClover\nscheduler\n4\n100000\n0.004\n\n\n47\nClover\nsession\n12\n100000\n0.012\n\n\n48\nClover\nsudo\n7\n100000\n0.007\n\n\n49\nClover\nsystem\n91105\n100000\n91.105\n\n\n50\nClover\ntechnicalCommittee\n16\n100000\n0.016\n\n\n51\nClover\ntreasury\n24\n100000\n0.024\n\n\n52\nClover\nutility\n13\n100000\n0.013\n\n\n53\nMoonbeam\nassets\n629\n100000\n0.629\n\n\n54\nMoonbeam\nbalances\n35719\n100000\n35.719\n\n\n55\nMoonbeam\ncrowdloanRewards\n129\n100000\n0.129\n\n\n56\nMoonbeam\ndemocracy\n7\n100000\n0.007\n\n\n57\nMoonbeam\ndmpQueue\n6\n100000\n0.006\n\n\n58\nMoonbeam\nethereum\n8560\n100000\n8.56\n\n\n59\nMoonbeam\nevm\n23795\n100000\n23.795\n\n\n60\nMoonbeam\nlocalAssets\n364\n100000\n0.364\n\n\n61\nMoonbeam\nparachainStaking\n325\n100000\n0.325\n\n\n62\nMoonbeam\nparachainSystem\n12\n100000\n0.012\n\n\n63\nMoonbeam\nsystem\n14601\n100000\n14.601\n\n\n64\nMoonbeam\ntreasury\n15802\n100000\n15.802\n\n\n65\nMoonbeam\nxTokens\n18\n100000\n0.018\n\n\n66\nMoonbeam\nxcmTransactor\n4\n100000\n0.004\n\n\n67\nMoonbeam\nxcmpQueue\n29\n100000\n0.029\n\n\n68\nParallel\namm\n1142\n100000\n1.142\n\n\n69\nParallel\nammRoute\n818\n100000\n0.818\n\n\n70\nParallel\nassets\n3151\n100000\n3.151\n\n\n71\nParallel\nbalances\n33390\n100000\n33.39\n\n\n72\nParallel\ncrowdloans\n24\n100000\n0.024\n\n\n73\nParallel\ndmpQueue\n205\n100000\n0.205\n\n\n74\nParallel\nliquidStaking\n46\n100000\n0.046\n\n\n75\nParallel\nloans\n14683\n100000\n14.683\n\n\n76\nParallel\noracle\n5765\n100000\n5.765\n\n\n77\nParallel\nparachainSystem\n404\n100000\n0.404\n\n\n78\nParallel\npolkadotXcm\n9\n100000\n0.009\n\n\n79\nParallel\nsession\n5\n100000\n0.005\n\n\n80\nParallel\nstreaming\n5\n100000\n0.005\n\n\n81\nParallel\nsystem\n30234\n100000\n30.234\n\n\n82\nParallel\ntransactionPayment\n9011\n100000\n9.011\n\n\n83\nParallel\nutility\n575\n100000\n0.575\n\n\n84\nParallel\nvesting\n366\n100000\n0.366\n\n\n85\nParallel\nxTokens\n121\n100000\n0.121\n\n\n86\nParallel\nxcmpQueue\n46\n100000\n0.046"
  },
  {
    "objectID": "R_Dashboard.html#row",
    "href": "R_Dashboard.html#row",
    "title": "Parachain Health Stats",
    "section": "Row",
    "text": "Row\n\nSelected stats for entire history\n\nmyFormat <- function(x, prefix = \"\", suffix = \"\") prefix %+% (x %>% as.numeric %>% round(2) %>% format(nsmall=1, big.mark=\",\")) %+% suffix\n\nnewNames <- c(\"Parachain\",\"Icon\",\"Active Accts\",\"Transfers\",\"Transfers USD\",\"Extrinsics\",\"Incoming XCM USD\",\"Outgoing XCM USD\")\n\noverview1 <- overview[id %in% chains, .(chainName, \"\", numAccountsActive, numTransfers, valueTransfersUSD, numExtrinsics,valXCMTransferIncomingUSD,valXCMTransferOutgoingUSD)]\nsetnames(overview1, newNames)\n\n\nprefix <- c(\"\",\"\",\"\",\"\",\"\",\"\")\n\nfor (i in 1:6) {\n  tag <- names(overview1)[i + 2]\n  v <- overview1[[tag]]\n  m <- median(v)\n  overview1[[tag]] <- cell_spec(myFormat(v, prefix[i]), color = ifelse(v > m, \"green\", ifelse(v < m, \"red\", \"black\")))\n}\n\nkbl(overview1, booktabs = TRUE, format.args = list(big.mark = \",\"), escape = FALSE, align = c('l','c',rep('r', 6))) %>%\n  kable_styling(latex_options = \"striped\", full_width = TRUE) %>%\n  column_spec(1, link = overview[id %in% chains, parachainsURL]) %>%\n  column_spec(2, image = spec_image(path = overview[id %in% chains, iconUrl], width = 50, height = 50))\n\n\n\n \n  \n    Parachain \n    Icon \n    Active Accts \n    Transfers \n    Transfers USD \n    Extrinsics \n    Incoming XCM USD \n    Outgoing XCM USD \n  \n \n\n  \n   \n Acala \n\n     \n\n    1,517.0 \n    2,913,278.0 \n    36,809,401,921.5 \n     5,332,050.0 \n    1,825,921,595.7 \n    2,147,065,157.9 \n  \n  \n   \n Astar \n\n     \n\n    2,940.0 \n    4,923,288.0 \n     4,846,169,376.2 \n    46,075,346.0 \n       10,419,422.1 \n          987,971.4 \n  \n  \n   \n Clover \n\n     \n\n       17.0 \n        8,380.0 \n        10,736,804.5 \n     3,600,498.0 \n                0.0 \n                0.0 \n  \n  \n   \n Moonbeam \n\n     \n\n    4,960.0 \n    4,316,298.0 \n     9,937,577,103.8 \n    16,051,827.0 \n    5,016,913,789.6 \n    3,465,364,536.3 \n  \n  \n   \n Parallel \n\n     \n\n      390.0 \n    1,576,899.0 \n       819,189,394.0 \n     4,359,137.0 \n       57,349,013.1 \n       34,271,910.5"
  },
  {
    "objectID": "R_Dashboard.html#row-1",
    "href": "R_Dashboard.html#row-1",
    "title": "Parachain Health Stats",
    "section": "Row",
    "text": "Row\n\nSelected stats for last 7 days\n\noverview7 <- overview[id %in% chains, .(chainName, \"\", numAccountsActive7d, numTransfers7d, valueTransfersUSD7d, numExtrinsics7d, numXCMTransferIncoming7d, numXCMTransferOutgoing7d)]\nsetnames(overview7, newNames)\n\nfor (i in 1:6) {\n  tag <- names(overview7)[i + 2]\n  v <- overview7[[tag]]\n  m <- median(v)\n  overview7[[tag]] <- cell_spec(myFormat(v, prefix[i]), color = ifelse(v > m, \"green\", ifelse(v < m, \"red\", \"black\")))\n}\n\nkbl(overview7, booktabs = TRUE, format.args = list(big.mark = \",\"), escape = FALSE, align = c('l','c',rep('r', 6))) %>%\n  kable_styling(latex_options = \"striped\", full_width = TRUE) %>%\n  column_spec(1, link = overview[id %in% chains, parachainsURL]) %>%\n  column_spec(2, image = spec_image(path = overview[id %in% chains, iconUrl], width = 50, height = 50))\n\n\n\n \n  \n    Parachain \n    Icon \n    Active Accts \n    Transfers \n    Transfers USD \n    Extrinsics \n    Incoming XCM USD \n    Outgoing XCM USD \n  \n \n\n  \n   \n Acala \n\n     \n\n      325.0 \n      5,029.0 \n    57,361,160.89 \n     99,429.0 \n     47.0 \n      2.0 \n  \n  \n   \n Astar \n\n     \n\n    2,043.0 \n     70,334.0 \n    25,990,494.61 \n    395,663.0 \n     50.0 \n     84.0 \n  \n  \n   \n Clover \n\n     \n\n       24.0 \n        206.0 \n        51,475.11 \n     91,893.0 \n      0.0 \n      3.0 \n  \n  \n   \n Moonbeam \n\n     \n\n    4,342.0 \n    101,321.0 \n    76,295,194.77 \n    437,569.0 \n    245.0 \n    216.0 \n  \n  \n   \n Parallel \n\n     \n\n      606.0 \n     65,502.0 \n     9,831,876.00 \n    140,170.0 \n    436.0 \n    224.0"
  },
  {
    "objectID": "R_Dashboard.html#row-2",
    "href": "R_Dashboard.html#row-2",
    "title": "Parachain Health Stats",
    "section": "Row",
    "text": "Row\n\nSelected stats for last 30 days\n\noverview30 <- overview[id %in% chains, .(chainName, \"\", numAccountsActive30d, numTransfers30d, valueTransfersUSD30d, numExtrinsics30d, numXCMTransferIncoming30d, numXCMTransferOutgoing30d)]\nsetnames(overview30, newNames)\n\nfor (i in 1:6) {\n  tag <- names(overview30)[i + 2]\n  v <- overview30[[tag]]\n  m <- median(v)\n  overview30[[tag]] <- cell_spec(myFormat(v, prefix[i]), color = ifelse(v > m, \"green\", ifelse(v < m, \"red\", \"black\")))\n}\n\nkbl(overview30, booktabs = TRUE, format.args = list(big.mark = \",\"), escape = FALSE, align = c('l','c',rep('r', 6))) %>%\n  kable_styling(latex_options = \"striped\", full_width = TRUE) %>%\n  column_spec(1, link = overview[id %in% chains, parachainsURL]) %>%\n  column_spec(2, image = spec_image(path = overview[id %in% chains, iconUrl], width = 50, height = 50))\n\n\n\n \n  \n    Parachain \n    Icon \n    Active Accts \n    Transfers \n    Transfers USD \n    Extrinsics \n    Incoming XCM USD \n    Outgoing XCM USD \n  \n \n\n  \n   \n Acala \n\n     \n\n      461.0 \n     25,559.0 \n    10,316,054,905.9 \n      585,501.0 \n      906.0 \n       24.0 \n  \n  \n   \n Astar \n\n     \n\n    1,744.0 \n    348,957.0 \n        74,979,423.3 \n    1,886,932.0 \n      230.0 \n      321.0 \n  \n  \n   \n Clover \n\n     \n\n       18.0 \n        925.0 \n           698,979.8 \n      413,360.0 \n        0.0 \n        3.0 \n  \n  \n   \n Moonbeam \n\n     \n\n    4,137.0 \n    390,714.0 \n       235,955,438.9 \n    1,705,632.0 \n    2,177.0 \n    2,121.0 \n  \n  \n   \n Parallel \n\n     \n\n      503.0 \n    273,904.0 \n       233,448,655.5 \n      588,371.0 \n    3,013.0 \n    1,471.0"
  },
  {
    "objectID": "R_Dashboard.html#row-3",
    "href": "R_Dashboard.html#row-3",
    "title": "Parachain Health Stats",
    "section": "Row",
    "text": "Row\n\nNumber of Addresses\n\naddr <- daily[!is.na(numAddresses), .(Date, Parachain, numAddresses)]\naddr[, numAddresses := numAddresses / 1e3]\np <- ggplot(addr, aes(x=Date, y=numAddresses, col=Parachain)) +\n  geom_line() + \n  theme(strip.background = element_blank(), strip.placement = \"outside\") +\n  labs(title=\"Total Addresses over Time\", x = \"\", y = \"Addresses (in thousands)\") +\n  theme(plot.title = element_text(hjust = 0.5)) +\n  theme(panel.background = element_rect(fill=bgcolor),\n        panel.border = element_blank())\nggplotly(p)"
  },
  {
    "objectID": "R_Dashboard.html#row-4",
    "href": "R_Dashboard.html#row-4",
    "title": "Parachain Health Stats",
    "section": "Row",
    "text": "Row\n\nNumber of Active Accounts\n\nactive <- daily[!is.na(numAccountsActive), .(Date, Parachain, numAccountsActive)]\nactive[, numAccountsActive := numAccountsActive / 1e3]\np <- ggplot(active, aes(x=Date, y=numAccountsActive, col=Parachain)) +\n  geom_line() + \n  theme(strip.background = element_blank(), strip.placement = \"outside\") +\n  labs(title=\"Daily Active Accounts\", x = \"\", y = \"Active Accounts (in thousands)\") +\n  theme(plot.title = element_text(hjust = 0.5)) +\n  theme(panel.background = element_rect(fill=bgcolor),\n        panel.border = element_blank())\nggplotly(p)"
  },
  {
    "objectID": "R_Dashboard.html#row-5",
    "href": "R_Dashboard.html#row-5",
    "title": "Parachain Health Stats",
    "section": "Row",
    "text": "Row\n\nNumber of Transfers\n\ntransfers <- daily[!is.na(numTransfers), .(Date, Parachain, numTransfers)]\ntransfers[, numTransfers := numTransfers / 1e3]\np <- ggplot(transfers, aes(x=Date, y=numTransfers, col=Parachain)) +\n  geom_line() + \n  theme(strip.background = element_blank(), strip.placement = \"outside\") +\n  labs(title=\"Number of Transfers over Time\", x = \"\", y = \"Transfers (in thousands)\") +\n  theme(plot.title = element_text(hjust = 0.5)) +\n  theme(panel.background = element_rect(fill=bgcolor),\n        panel.border = element_blank())\nggplotly(p)"
  },
  {
    "objectID": "R_Dashboard.html#row-6",
    "href": "R_Dashboard.html#row-6",
    "title": "Parachain Health Stats",
    "section": "Row",
    "text": "Row\n\nValue of Transfers in USD\n\nvalueTransfersUSD <- daily[!is.na(valueTransfersUSD), .(Date, Parachain, valueTransfersUSD)]\nvalueTransfersUSD[, valueTransfersUSD := valueTransfersUSD / 1e3]\np <- ggplot(valueTransfersUSD, aes(x=Date, y=valueTransfersUSD, col=Parachain)) +\n  geom_line() + \n  theme(strip.background = element_blank(), strip.placement = \"outside\") +\n  labs(title=\"Value of Transfers in USD over Time\", x = \"\", y = \"Value of Transfers in USD (in thousands)\") +\n  theme(plot.title = element_text(hjust = 0.5)) +\n  theme(panel.background = element_rect(fill=bgcolor),\n        panel.border = element_blank())\nggplotly(p)"
  },
  {
    "objectID": "R_Dashboard.html#row-7",
    "href": "R_Dashboard.html#row-7",
    "title": "Parachain Health Stats",
    "section": "Row",
    "text": "Row\n\nValue of Transfers in USD (excluding Acala)\n\np2 <- ggplot(valueTransfersUSD[Parachain != \"Acala\"], aes(x=Date, y=valueTransfersUSD, col=Parachain)) +\n  geom_line() + \n  theme(strip.background = element_blank(), strip.placement = \"outside\") +\n  labs(title=\"Value of Transfers in USD over Time (excluding Acala)\", x = \"\", y = \"Value of Transfers in USD (in thousands)\") +\n  theme(plot.title = element_text(hjust = 0.5)) +\n  theme(panel.background = element_rect(fill=bgcolor),\n        panel.border = element_blank())\nggplotly(p2)"
  },
  {
    "objectID": "R_Dashboard.html#row-8",
    "href": "R_Dashboard.html#row-8",
    "title": "Parachain Health Stats",
    "section": "Row",
    "text": "Row\n\nNumber of Events\n\nEvents <- daily[!is.na(numEvents), .(Date, Parachain, numEvents)]\nEvents[, numEvents := numEvents / 1e3]\np <- ggplot(Events, aes(x=Date, y=numEvents, col=Parachain)) +\n  geom_line() + \n  theme(strip.background = element_blank(), strip.placement = \"outside\") +\n  labs(title=\"Number of Events over Time\", x = \"\", y = \"Events (in thousands)\") +\n  theme(plot.title = element_text(hjust = 0.5)) +\n  theme(panel.background = element_rect(fill=bgcolor),\n        panel.border = element_blank())\nggplotly(p)"
  },
  {
    "objectID": "R_Dashboard.html#row-9",
    "href": "R_Dashboard.html#row-9",
    "title": "Parachain Health Stats",
    "section": "Row",
    "text": "Row\n\nNumber of Extrinsics\n\nExtrinsics <- daily[!is.na(numExtrinsics), .(Date, Parachain, numExtrinsics)]\nExtrinsics[, numExtrinsics := numExtrinsics / 1e3]\np <- ggplot(Extrinsics, aes(x=Date, y=numExtrinsics, col=Parachain)) +\n  geom_line() + \n  theme(strip.background = element_blank(), strip.placement = \"outside\") +\n  labs(title=\"Number of Extrinsics over Time\", x = \"\", y = \"Extrinsics (in thousands)\") +\n  theme(plot.title = element_text(hjust = 0.5)) +\n  theme(panel.background = element_rect(fill=bgcolor),\n        panel.border = element_blank())\nggplotly(p)"
  },
  {
    "objectID": "R_Dashboard.html#row-10",
    "href": "R_Dashboard.html#row-10",
    "title": "Parachain Health Stats",
    "section": "Row",
    "text": "Row\n\nNumber of EVM Transactions\n\nTransactionsEVM <- daily[!is.na(numTransactionsEVM), .(Date, Parachain, numTransactionsEVM)]\nTransactionsEVM[, numTransactionsEVM := numTransactionsEVM / 1e3]\np <- ggplot(TransactionsEVM, aes(x=Date, y=numTransactionsEVM, col=Parachain)) +\n  geom_line() + \n  theme(strip.background = element_blank(), strip.placement = \"outside\") +\n  labs(title=\"Number of EVM Transactions over Time\", x = \"\", y = \"EVM Transactions (in thousands)\") +\n  theme(plot.title = element_text(hjust = 0.5)) +\n  theme(panel.background = element_rect(fill=bgcolor),\n        panel.border = element_blank())\nggplotly(p)"
  },
  {
    "objectID": "R_Dashboard.html#row-11",
    "href": "R_Dashboard.html#row-11",
    "title": "Parachain Health Stats",
    "section": "Row",
    "text": "Row\n\nFees in Native Tokens\n\nfees <- daily[!is.na(fees), .(Date, Parachain, fees)]\nfees[, fees := as.numeric(fees)]\np <- ggplot(fees, aes(x=Date, y=fees, col=Parachain)) +\n  geom_line() + \n  theme(strip.background = element_blank(), strip.placement = \"outside\") +\n  labs(title=\"Total Fees over Time\", x = \"\", y = \"Fees (in native tokens)\") +\n  theme(plot.title = element_text(hjust = 0.5)) +\n  theme(panel.background = element_rect(fill=bgcolor),\n        panel.border = element_blank())\nggplotly(p)"
  },
  {
    "objectID": "R_Dashboard.html#row-12",
    "href": "R_Dashboard.html#row-12",
    "title": "Parachain Health Stats",
    "section": "Row",
    "text": "Row\n\nFees in Native Tokens (excluding Clover)\n\np2 <- ggplot(fees[Parachain != \"Clover\"], aes(x=Date, y=fees, col=Parachain)) +\n  geom_line() + \n  theme(strip.background = element_blank(), strip.placement = \"outside\") +\n  labs(title=\"Total Fees over Time (excluding Clover)\", x = \"\", y = \"Fees (in native tokens)\") +\n  theme(plot.title = element_text(hjust = 0.5)) +\n  theme(panel.background = element_rect(fill=bgcolor),\n        panel.border = element_blank())\nggplotly(p2)"
  },
  {
    "objectID": "R_Dashboard.html#row-13",
    "href": "R_Dashboard.html#row-13",
    "title": "Parachain Health Stats",
    "section": "Row",
    "text": "Row\n\nValue of Incoming XCM Transfer in USD\n\nvalXCMTransferIncomingUSD <- daily[!is.na(valXCMTransferIncomingUSD), .(Date, Parachain, valXCMTransferIncomingUSD)]\nvalXCMTransferIncomingUSD[, valXCMTransferIncomingUSD := valXCMTransferIncomingUSD / 1e3]\np <- ggplot(valXCMTransferIncomingUSD, aes(x=Date, y=valXCMTransferIncomingUSD, col=Parachain)) +\n  geom_line() + \n  theme(strip.background = element_blank(), strip.placement = \"outside\") +\n  labs(title=\"Value Incoming XCM Transfer USD over Time\", x = \"\", y = \"Value Incoming XCM Transfer USD (in thousands)\") +\n  theme(plot.title = element_text(hjust = 0.5)) +\n  theme(panel.background = element_rect(fill=bgcolor),\n        panel.border = element_blank())\nggplotly(p)"
  },
  {
    "objectID": "R_Dashboard.html#row-14",
    "href": "R_Dashboard.html#row-14",
    "title": "Parachain Health Stats",
    "section": "Row",
    "text": "Row\n\nValue of Outgoing XCM Transfer in USD\n\nvalXCMTransferOutgoingUSD <- daily[!is.na(valXCMTransferOutgoingUSD), .(Date, Parachain, valXCMTransferOutgoingUSD)]\nvalXCMTransferOutgoingUSD[, valXCMTransferOutgoingUSD := valXCMTransferOutgoingUSD / 1e3]\np2 <- ggplot(valXCMTransferOutgoingUSD, aes(x=Date, y=valXCMTransferOutgoingUSD, col=Parachain)) +\n  geom_line() + \n  theme(strip.background = element_blank(), strip.placement = \"outside\") +\n  labs(title=\"Value Outgoing XCM Transfer USD over Time\", x = \"\", y = \"Value Outgoing XCM Transfer USD (in thousands)\") +\n  theme(plot.title = element_text(hjust = 0.5)) +\n  theme(panel.background = element_rect(fill=bgcolor),\n        panel.border = element_blank())\nggplotly(p2)"
  },
  {
    "objectID": "R_Dashboard.html#row-15",
    "href": "R_Dashboard.html#row-15",
    "title": "Parachain Health Stats",
    "section": "Row",
    "text": "Row\n\ndatatable(daily, options = list(pageLength = 10))"
  },
  {
    "objectID": "R_Dashboard.html#row-16",
    "href": "R_Dashboard.html#row-16",
    "title": "Parachain Health Stats",
    "section": "Row",
    "text": "Row\n\nSources\n\nAll data obtained from the Polkaholic API using the subscanr project.\nRun date: 2022-09-14."
  }
]