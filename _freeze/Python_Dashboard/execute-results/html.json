{
  "hash": "4db34cd7ae0cfe2cb57204044be6fb7b",
  "result": {
    "markdown": "---\ntitle: \"Parachain Health (Python version)\"\n---\n\n#### Gathering event data from the Polkaholic API\n\nThis report uses the [Polkaholic API](https://docs.polkaholic.io/#introduction) to extract 100,000 events over the past few days to analyze the health of the first five parachains to win Polkadot auctions: Acala, Moonbeam, Astar, Parallel, and Clover. We will look at simple measure such as average number of events per block and average time for block production to see how these parachains compare in terms of performance and utilization.\n\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Show hidden code\"}\nimport pandas as pd\nfrom IPython.display import display, Markdown\nfrom tabulate import tabulate\nimport time\nimport datetime\nimport requests\nimport json\nimport seaborn as sns\nimport matplotlib.pyplot as plt\npd.set_option('display.max_columns', None)\n\ndef getPolkaholicEvents(chain, nobs = 100, module = \"\", call = \"\", startDate = \"\", endDate = \"\"):\n  API_ENDPOINT = f\"https://api.polkaholic.io/search/events?limit={nobs}\"\n  header = {\"Authorization\": \"32579f3ad8360ceff02f1e077384eec9\"}\n  if module != \"\" and call != \"\":\n    data = {\"chainIdentifier\": chain, \"section\": module, \"method\": call, \"dateStart\": startDate, \"dateEnd\": endDate}\n  elif module != \"\" and call == \"\":\n    data = {\"chainIdentifier\": chain, \"section\": module, \"dateStart\": startDate, \"dateEnd\": endDate}\n  else: \n    data = {\"chainIdentifier\": chain, \"dateStart\": startDate, \"dateEnd\": endDate}\n  r = requests.post(url = API_ENDPOINT, headers = header, data = data)\n  out = pd.DataFrame(r.json())\n  out['Date'] = pd.to_datetime(out['blockTS'],unit='s')\n  return out\n\n# Define the parameters\nstartDate = (datetime.date.today() - datetime.timedelta(days = 14)).strftime(\"%Y-%m-%d\")\nendDate = (datetime.date.today() - datetime.timedelta(days = 1)).strftime(\"%Y-%m-%d\")\nnobs = 100000 # This (100,) is actually the max you can get in one call\nmodule = \"\"\ncall = \"\"\n\n# Pull the data for each parachain, sleeping for 3 seconds in between chains (just in case)\nacala = getPolkaholicEvents(chain = \"acala\", nobs = nobs, module = module, call = call, startDate = startDate, endDate = endDate)\ntime.sleep(3)\nastar = getPolkaholicEvents(chain = \"astar\", nobs = nobs, module = module, call = call, startDate = startDate, endDate = endDate)\ntime.sleep(3)\nclover = getPolkaholicEvents(chain = \"clover\", nobs = nobs, module = module, call = call, startDate = startDate, endDate = endDate)\ntime.sleep(3)\nmoonbeam = getPolkaholicEvents(chain = \"moonbeam\", nobs = nobs, module = module, call = call, startDate = startDate, endDate = endDate)\ntime.sleep(3)\nparallel = getPolkaholicEvents(chain = \"parallel\", nobs = nobs, module = module, call = call, startDate = startDate, endDate = endDate)\n\n# Combine all the data into one DataFrame\ncomb = pd.concat([acala, astar, clover, moonbeam, parallel])\n```\n\n\n#### Summary of date and block ranges\n\nSince we defined our data by the number of events, the date range and number of blocks will vary by parachain, as shown in the table below.\n\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Show hidden code\"}\nsummary = pd.DataFrame([{'chainName': k,\n                        'minDate': v.Date.min(),\n                        'maxDate': v.Date.max(),\n                        'minBlock': v.blockNumber.min(),\n                        'maxBlock': v.blockNumber.max()}\n                       for k,v in comb.groupby(['chainName'])])\nsummary['numBlocks'] = summary['maxBlock'] - summary['minBlock']\n\nMarkdown(tabulate(\n  pd.DataFrame(summary),\n  headers=[\"Parachain\",\"Earliest Date\", \"Latest Date\", \"Earliest Block\", \"Lastest Block\", \"Number of Blocks\"]\n))\n```\n    Parachain    Earliest Date        Latest Date            Earliest Block    Lastest Block    Number of Blocks\n--  -----------  -------------------  -------------------  ----------------  ---------------  ------------------\n 0  Acala        2022-09-09 23:41:00  2022-09-13 23:59:07           1826051          1853903               27852\n 1  Astar        2022-09-13 20:20:06  2022-09-13 23:59:48           1853040          1854099                1059\n 2  Clover       2022-09-07 22:17:54  2022-09-13 23:59:48           1729994          1771314               41320\n 3  Moonbeam     2022-09-13 19:10:24  2022-09-13 23:59:54           1860823          1862231                1408\n 4  Parallel     2022-09-12 14:21:30  2022-09-13 23:59:54           1792801          1802581                9780\n\n\n#### Number of Events by Module\n\nWhile network utilization can be measured in many different ways, we will use the average number of events per block as a rough estimate for how much a parachain is being used, relative to other parachains. (This table has been moved to the end of the document due to its large size.)\n\n#### Network utilization\n\nWhile network utilization can be measured in many different ways, we will use the average number of events per block as a rough estimate for how much a parachain is being used, relative to other parachains.\n\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Show hidden code\"}\nevents_per_block = comb.groupby(['chainName','blockNumber'])['eventID'].count()\navg_events_per_block = events_per_block.groupby(['chainName']).mean().round(1)\n\nMarkdown(tabulate(\n  pd.DataFrame(avg_events_per_block),\n  headers=[\"Parachain\",\"Average number of events per block\"]\n))\n```\nParachain      Average number of events per block\n-----------  ------------------------------------\nAcala                                         3.6\nAstar                                        94.3\nClover                                        2.4\nMoonbeam                                     71\nParallel                                     10.2\n\n\n#### Distribution of number of events per block\n\n::: {.cell execution_count=4}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Show hidden code\"}\nepb = pd.DataFrame(events_per_block).reset_index()\nepb = epb.rename(columns={\"chainName\": \"Parachain\", \"blockNumber\": \"Block\", \"eventID\": \"Events\"})\n# sns.violinplot(x=epb[\"Events\"])\nsns.boxplot(data=epb, x=\"Events\", y=\"Parachain\")\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](Python_Dashboard_files/figure-html/cell-5-output-1.png){width=658 height=429}\n:::\n:::\n\n\n#### Block Time Statistics\n\nMax block time calculates how long it took, in seconds, to produce the slowest block and differs widely for the various parachains.\n\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Show hidden code\"}\nblock_duration = comb.groupby(['chainName','blockNumber'])['Date'].min().diff()\n# Remove NaT observations\nblock_duration = block_duration.dropna()\n\nmb = pd.DataFrame(block_duration.dt.seconds).reset_index()\nmb = mb.rename(columns={\"chainName\": \"Parachain\", \"blockNumber\": \"Block\", \"Date\": \"Seconds\"})\n# remove four errant observations with block time over 80,000 seconds??\nmb = mb[mb['Seconds'] < 999]\n\nmax_block_time = pd.DataFrame([{'Parachain': k,\n                        'minBlockTime': v.Seconds.min(),\n                        'maxBlockTime': v.Seconds.max(),\n                        'avgBlockTime': v.Seconds.mean().round(1)}\n                       for k,v in mb.groupby(['Parachain'])])\n\nMarkdown(tabulate(\n  pd.DataFrame(max_block_time),\n  headers=[\"Parachain\",\"Min Block Time\",\"Max Block Time\",\"Average Block Time\"]\n))\n```\n    Parachain      Min Block Time    Max Block Time    Average Block Time\n--  -----------  ----------------  ----------------  --------------------\n 0  Acala                       7                84                  12.5\n 1  Astar                      11                67                  12.4\n 2  Clover                      7               103                  12.7\n 3  Moonbeam                   10                71                  12.3\n 4  Parallel                    8                72                  12.4\n\n\n#### Slow Block Production\n\nWith the average block taking 12 seconds to produce, and very few observations of faster block production, we look at slow block production as a performance measure. This table shows the number of blocks that took over 13 seconds to produce.\n\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Show hidden code\"}\n# Find slow block production\nsb = pd.DataFrame(block_duration.dt.seconds).reset_index()\nsb = sb.rename(columns={\"chainName\": \"Parachain\", \"blockNumber\": \"Block\", \"Date\": \"Seconds\"})\n\nslow_blocks = pd.DataFrame([{'Parachain': k,\n                        'N': v.Seconds.count(),\n                        'slow': v.Seconds[v.Seconds > 12].count()}\n                       for k,v in sb.groupby(['Parachain'])])\nslow_blocks['pct_slow'] = ((slow_blocks['slow'] / slow_blocks['N']) * 100).round(1)\n\nMarkdown(tabulate(\n  pd.DataFrame(slow_blocks),\n  headers=[\"Parachain\",\"Total Blocks\",\"Slow Blocks (over 13 seconds)\",\"Percent Slow (%)\"]\n))\n```\n    Parachain      Total Blocks    Slow Blocks (over 13 seconds)    Percent Slow (%)\n--  -----------  --------------  -------------------------------  ------------------\n 0  Acala                 27839                             4698                16.9\n 1  Astar                  1060                              164                15.5\n 2  Clover                41307                             7980                19.3\n 3  Moonbeam               1408                              242                17.2\n 4  Parallel               9774                             1570                16.1\n\n\n#### Distribution of block duration times\n\nThe following chart shows the distribution of block duration times for each parachain. To enhance the visual comparison we exclude block times greater than 30 seconds.\n\n::: {.cell execution_count=7}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Show hidden code\"}\nbd = pd.DataFrame(block_duration.dt.seconds).reset_index()\nbd = bd.rename(columns={\"chainName\": \"Parachain\", \"blockNumber\": \"Block\", \"Date\": \"Seconds\"})\nbd = bd[bd['Seconds'] > 0]\nbd = bd[bd['Seconds'] < 30]\n# sns.violinplot(x=bdff[\"Seconds\"])\nsns.boxplot(data=bd, x=\"Seconds\", y=\"Parachain\")\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](Python_Dashboard_files/figure-html/cell-8-output-1.png){width=648 height=429}\n:::\n:::\n\n\n#### Number of Events by Module\n\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Show hidden code\"}\nsb = pd.DataFrame(block_duration.dt.seconds).reset_index()\nsb = sb.rename(columns={\"chainName\": \"Parachain\", \"blockNumber\": \"Block\", \"Date\": \"Seconds\"})\n\nslow_blocks = pd.DataFrame([{'Parachain': k,\n                        'N': v.Seconds.count(),\n                        'slow': v.Seconds[v.Seconds > 12].count()}\n                       for k,v in sb.groupby(['Parachain'])])\n\ncount_by_chain = comb.groupby(['chainName'])['eventID'].count()\ncount_by_chain = pd.DataFrame(count_by_chain).reset_index().rename(columns={\"chainName\": \"Parachain\", \"eventID\": \"N\"})\n\ncount_by_section = comb.groupby(['chainName','section'])['eventID'].count()\ncount_by_section = pd.DataFrame(count_by_section).reset_index().rename(columns={\"chainName\": \"Parachain\", \"section\": \"Module\", \"eventID\": \"Events\"})\ncount_by_section = count_by_section.merge(count_by_chain, on = \"Parachain\")\ncount_by_section['Percent'] = (count_by_section['Events'] / count_by_section['N']) * 100\n\nMarkdown(tabulate(\n  pd.DataFrame(count_by_section),\n  headers=[\"Parachain\",\"Module\",\"Events\",\"Total\",\"Percent\"]\n))\n```\n    Parachain    Module                Events    Total    Percent\n--  -----------  ------------------  --------  -------  ---------\n 0  Acala        balances               17954   100000     17.954\n 1  Acala        currencies               119   100000      0.119\n 2  Acala        democracy                 43   100000      0.043\n 3  Acala        dmpQueue                   7   100000      0.007\n 4  Acala        homa                      30   100000      0.03\n 5  Acala        multisig                   6   100000      0.006\n 6  Acala        nft                        2   100000      0.002\n 7  Acala        parachainSystem           14   100000      0.014\n 8  Acala        proxy                   3727   100000      3.727\n 9  Acala        scheduler                  2   100000      0.002\n10  Acala        session                   49   100000      0.049\n11  Acala        stableAsset               19   100000      0.019\n12  Acala        system                 63922   100000     63.922\n13  Acala        tokens                   271   100000      0.271\n14  Acala        transactionPause           8   100000      0.008\n15  Acala        transactionPayment      6547   100000      6.547\n16  Acala        treasury                6594   100000      6.594\n17  Acala        utility                  234   100000      0.234\n18  Acala        vesting                  406   100000      0.406\n19  Acala        xTokens                    2   100000      0.002\n20  Acala        xcmpQueue                 44   100000      0.044\n21  Astar        assets                   470   100000      0.47\n22  Astar        balances               41218   100000     41.218\n23  Astar        dappsStaking            4455   100000      4.455\n24  Astar        dmpQueue                   4   100000      0.004\n25  Astar        ethereum                9390   100000      9.39\n26  Astar        evm                    28028   100000     28.028\n27  Astar        parachainSystem            8   100000      0.008\n28  Astar        polkadotXcm                1   100000      0.001\n29  Astar        session                    5   100000      0.005\n30  Astar        system                 13039   100000     13.039\n31  Astar        transactionPayment       883   100000      0.883\n32  Astar        utility                 2473   100000      2.473\n33  Astar        vesting                   22   100000      0.022\n34  Astar        xcmpQueue                  4   100000      0.004\n35  Clover       assetConfig                2   100000      0.002\n36  Clover       assets                     3   100000      0.003\n37  Clover       balances                4563   100000      4.563\n38  Clover       council                   20   100000      0.02\n39  Clover       democracy                 12   100000      0.012\n40  Clover       dmpQueue                   3   100000      0.003\n41  Clover       electionsPhragmen          1   100000      0.001\n42  Clover       ethereum                2096   100000      2.096\n43  Clover       evm                     2106   100000      2.106\n44  Clover       parachainSystem            7   100000      0.007\n45  Clover       polkadotXcm                6   100000      0.006\n46  Clover       scheduler                  4   100000      0.004\n47  Clover       session                   12   100000      0.012\n48  Clover       sudo                       7   100000      0.007\n49  Clover       system                 91105   100000     91.105\n50  Clover       technicalCommittee        16   100000      0.016\n51  Clover       treasury                  24   100000      0.024\n52  Clover       utility                   13   100000      0.013\n53  Moonbeam     assets                   629   100000      0.629\n54  Moonbeam     balances               35720   100000     35.72\n55  Moonbeam     crowdloanRewards         129   100000      0.129\n56  Moonbeam     democracy                  7   100000      0.007\n57  Moonbeam     dmpQueue                   6   100000      0.006\n58  Moonbeam     ethereum                8558   100000      8.558\n59  Moonbeam     evm                    23798   100000     23.798\n60  Moonbeam     localAssets              364   100000      0.364\n61  Moonbeam     parachainStaking         325   100000      0.325\n62  Moonbeam     parachainSystem           12   100000      0.012\n63  Moonbeam     system                 14600   100000     14.6\n64  Moonbeam     treasury               15801   100000     15.801\n65  Moonbeam     xTokens                   18   100000      0.018\n66  Moonbeam     xcmTransactor              4   100000      0.004\n67  Moonbeam     xcmpQueue                 29   100000      0.029\n68  Parallel     amm                     1142   100000      1.142\n69  Parallel     ammRoute                 818   100000      0.818\n70  Parallel     assets                  3151   100000      3.151\n71  Parallel     balances               33390   100000     33.39\n72  Parallel     crowdloans                24   100000      0.024\n73  Parallel     dmpQueue                 205   100000      0.205\n74  Parallel     liquidStaking             46   100000      0.046\n75  Parallel     loans                  14683   100000     14.683\n76  Parallel     oracle                  5765   100000      5.765\n77  Parallel     parachainSystem          404   100000      0.404\n78  Parallel     polkadotXcm                9   100000      0.009\n79  Parallel     session                    5   100000      0.005\n80  Parallel     streaming                  5   100000      0.005\n81  Parallel     system                 30235   100000     30.235\n82  Parallel     transactionPayment      9011   100000      9.011\n83  Parallel     utility                  574   100000      0.574\n84  Parallel     vesting                  366   100000      0.366\n85  Parallel     xTokens                  121   100000      0.121\n86  Parallel     xcmpQueue                 46   100000      0.046\n\n\n",
    "supporting": [
      "Python_Dashboard_files"
    ],
    "filters": [],
    "includes": {}
  }
}